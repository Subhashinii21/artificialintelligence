def is_safe(board, row, col, n):
    # Check if the queen can be placed on board[row][col]
    # Check this row on left side
    for i in range(col):
        if board[row][i] == 1:
            return False
    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    # Check lower diagonal on left side
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True

def solve_n_queens(board, col, n):
    # base case: If all queens are placed then return True
    if col >= n:
        return True
    # Consider this column and try placing this queen in all rows one by one
    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1
            if solve_n_queens(board, col+1, n) == True:
                return True
            # If placing queen in board[i][col
            # doesn't lead to a solution then
            # queen from board[i][col]
            board[i][col] = 0
    # if the queen can not be placed in any row in this column col
    # then return False
    return False

def print_solution(board, n):
    for i in range(n):
        for j in range(n):
            print(board[i][j], end=" ")
        print()

def n_queens(n):
    board = [[0 for x in range(n)]for y in range(n)]
    if solve_n_queens(board, 0, n) == False:
        print("Solution does not exist")
        return False
    print_solution(board, n)
    return True

# Driver code to test above functions
n = 4
n_queens(n)
